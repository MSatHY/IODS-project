getwd()
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
str(lrn14)
dim(lrn14)
# 1.1 Select the columns related to deep learning and create column 'deep' by averaging
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# 1.2 select the columns related to surface learning and create column 'surf' by averaging
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# 1.3 select the columns related to strategic learning and create column 'stra' by averaging
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
library(dplyr)
# 1.1 Select the columns related to deep learning and create column 'deep' by averaging
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# 1.2 select the columns related to surface learning and create column 'surf' by averaging
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# 1.3 select the columns related to strategic learning and create column 'stra' by averaging
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# Selecting the data for further analysis:
analysis_questions <- c( "gender", "Age" , "Attitude", "deep", "stra", "surf" , "Points")
analysis <- select(lrn14, one_of(analysis_questions))
library(dplyr)
# Installing the R packages needed for the code to work:
install.packages("pacman")
library(pacman)
p_load(dplyr)
# loading libraries
library(dplyr)
# reading the data files
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
math <- read.csv("student-mat.csv", sep = ";" , header=TRUE)
por <- read.csv("student-por.csv", sep = ";" , header=TRUE)
# Exploring data
str(math)      # factors and integers
dim(math)      # 395 students and 33 variables
str(por)      # factors and integers
dim(por)      # 382 students and 33 variables
# Joining data (inner_join = keep only students present in both datasets)
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".mat",".por"))
# Exploring the joined data
colnames(mat_por) # suffixes work as they should
str(mat_por)      # factors and integers
dim(mat_por)      # 382 students and 53 variables
dim(por)      # 382 students and 33 variables
colnames(mat_por) # suffixes work as they should
str(mat_por)      # factors and integers
dim(mat_por)      # 382 students and 53 variables
# Exploring the joined data
colnames(math_por) # suffixes work as they should
str(math_por)      # factors and integers
dim(math_por)      # 382 students and 53 variables
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
# Combining alcohol use and making a logical variable for high use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
dim(alc)
write.table(alc, file = "student_alc.txt", append = F, quote = F, sep="\t")
reading_test <- read.table("student_alc.txt", sep="\t", header=TRUE)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
twd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
library(dplyr)
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
library(dplyr)
read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep = ";", header = T)
alc <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep = ";", header = T)
alc <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep = ",", header = T)
colnames(alc)
selected_variables <- c("age","studytime","Mjob","Fjob","high_use")
?select
analysis <- select(alc, one_of(analysis_variables))
analysis_variables <- c("age","studytime","Mjob","Fjob","high_use")
analysis <- select(alc, one_of(analysis_variables))
summary(analysis)
analysis_variables <- c("age","sex","Mjob","Fjob","high_use")
analysis <- select(alc, one_of(analysis_variables))
summary(analysis)
analysis_variables <- c("age","sex","Mjob","Fjob","high_use")
analysis <- select(alc, one_of(analysis_variables))
summary(analysis)
p1 <- ggplot(analysis, aes(x = age, col = sex))
library(ggplot2)
p1 <- ggplot(analysis, aes(x = age, col = sex))
p2 <- p1 + geom_histogram(binwidth=1)
p2
p1 <- ggplot(analysis, aes(x = age, col = sex))
p1 <- p1 + geom_histogram(binwidth=1)
par(mfrow = c(2,2))
p1
p1
# Selecting the variables
analysis_variables <- c("age","sex","Mjob","Fjob","high_use")
analysis <- select(alc, one_of(analysis_variables))
# Summary
summary(analysis)
# Histograms of non-logicals
p1a <- ggplot(analysis, aes(x = age, col = sex))
p1 <- p1a + geom_histogram(binwidth=1)
p2a <- ggplot(analysis, aes(x = Mjob, col = sex))
p2 <- p2a + geom_histogram(binwidth=1)
p3a <- ggplot(analysis, aes(x = Fjob, col = sex))
p3 <- p3a + geom_histogram(binwidth=1)
p1 # printout
p2 # printout
p1a <- ggplot(analysis, aes(x = age, col = sex))
p1 <- p1a + geom_histogram(binwidth=1)
p2a <- ggplot(analysis, aes(x = Mjob, col = sex))
p2 <- p2a + geom_bar()
p3a <- ggplot(analysis, aes(x = Fjob, col = sex))
p3 <- p3a + geom_bar()
p1 # printout
p2 # printout
p3 # printout
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
gather(analysis) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
summary(analysis)
```{r}
# Graphical disributions of the non-logical variables
p1a <- ggplot(analysis, aes(x = age, col = sex))
p1 <- p1a + geom_histogram(binwidth=1)
p2a <- ggplot(analysis, aes(x = Mjob, col = sex))
p2 <- p2a + geom_bar()
p3a <- ggplot(analysis, aes(x = Fjob, col = sex))
p3 <- p3a + geom_bar()
p1 # printout
p2 # printout
p3 # printout
g1 <- ggplot(analysis, aes(x = high_use, y = age, col = sex))
g1 + geom_boxplot() + ylab("Age")
table(high_use = analysis$high_use, age = analysis$age)
table(high_use = analysis$high_use, age = analysis$Mjob)
table(Age = analysis$age, high_use = analysis$high_use)
table(MotherJob = analysis$Mjob, high_use = analysis$high_use)
table(Sex = analysis$sex, high_use = analysis$high_use)
table(FatherJob = analysis$Fjob, high_use = analysis$high_use)
table(Age = analysis$age, high_use = analysis$high_use)
table(Sex = analysis$sex, high_use = analysis$high_use)
table(MotherJob = analysis$Mjob, high_use = analysis$high_use)
table(FatherJob = analysis$Fjob, high_use = analysis$high_use)
table(Age = analysis$age, high_use = analysis$high_use) %>% prop.table() %>% addmargins()
table(Sex = analysis$sex, high_use = analysis$high_use) %>% prop.table() %>% addmargins()
table(MotherJob = analysis$Mjob, high_use = analysis$high_use) %>% prop.table() %>% addmargins()
table(FatherJob = analysis$Fjob, high_use = analysis$high_use) %>% prop.table() %>% addmargins()
table(MotherJob = analysis$Mjob, high_use = analysis$high_use) %>% addmargins()
table(FatherJob = analysis$Fjob, high_use = analysis$high_use) %>% addmargins()
table(Age = analysis$age, high_use = analysis$high_use) %>% addmargins()
table(Sex = analysis$sex, high_use = analysis$high_use) %>% addmargins()
table(MotherJob = analysis$Mjob, high_use = analysis$high_use) %>% addmargins()
table(FatherJob = analysis$Fjob, high_use = analysis$high_use) %>% addmargins()
g1 <- ggplot(analysis, aes(x = high_use, y = age))
g1 + geom_boxplot() + ylab("Age")
analysis2 <- mutate(analysis, Funcommon = (Fjob=1|Fjob=2|Fjob=5))
analysis <- mutate(analysis, Funcommon = (Fjob=1|Fjob=2|Fjob=5))
analysis <- mutate(analysis, Funcommon = [(Fjob=1)|(Fjob=2)|(Fjob=5)] )
analysis <- mutate(analysis, Funcommon = (Fjob=1)|(Fjob=2)|(Fjob=5) )
?mutate
analysis <- mutate(analysis, Func = ((Fjob=1)|(Fjob=2)) |(Fjob=5) )
head(analysis)
head(analysis, n=10)
head(analysis, n=20)
analysis <- mutate(analysis, Func = (Fjob="at_home"|Fjob="health"|Fjob="teacher") )
mutate(analysis, Func = (Fjob="at_home"|Fjob="health"|Fjob="teacher") )
mutate(analysis, Func = (Fjob=="at_home"|Fjob=="health"|Fjob=="teacher") )
analysis <- mutate(analysis, Func = (Fjob=="at_home"|Fjob=="health"|Fjob=="teacher") )
head(analysis)
str(analysis)
analysis <- mutate(analysis, Mhome = (Mjob=="at_home")
str(analysis)
str(analysis)
analysis <- mutate(analysis, Mhome = (Mjob=="at_home") )
str(analysis)
model <- glm(high_use ~ age + sex + Mhome + Func, data = analysis, family = "binomial")
summary(model)
model <- glm(high_use ~ age + sex + Mhome + Func, data = analysis, family = "binomial")
summary(model)
coef(model)
coef(model)
model <- glm(high_use ~ age + sex + Mhome + Func, data = analysis, family = "binomial")
summary(model)
cbind(CO, OR, CI)
CO <- coef(model)
cbind(CO, OR, CI)
# store coefficients of the model (CO)
CO <- coef(model)
# compute odds ratios (OR)
OR <- coef(model) %>% exp
# compute confidence intervals (CI)
CI <- confint(model) %>% exp
# print out the odds ratios with their confidence intervals (and coefficients)
cbind(CO, OR, CI)
probabilities <- predict(model, type = "response")
analysis <- mutate(analysis, probability = probabilities)
alc <- mutate(alc, prediction = probabilities>0.5)
table(high_use = analysis$high_use, prediction = analysis$prediction)
probabilities <- predict(model, type = "response")
analysis <- mutate(analysis, probability = probabilities)
alc <- mutate(alc, prediction = probabilities>0.5)
table(high_use = analysis$high_use, prediction = analysis$prediction)
probabilities <- predict(model, type = "response")
analysis <- mutate(analysis, probability = probabilities)
analysis <- mutate(analysis, prediction = probabilities>0.5)
table(high_use = analysis$high_use, prediction = analysis$prediction)
model <- glm(high_use ~ age + sex + Func, data = analysis, family = "binomial")
probabilities <- predict(model, type = "response")
analysis <- mutate(analysis, probability = probabilities)
analysis <- mutate(analysis, prediction = probabilities>0.5)
table(high_use = analysis$high_use, prediction = analysis$prediction)
model <- glm(high_use ~ age + sex + Mhome + Func, data = analysis, family = "binomial")
probabilities <- predict(model, type = "response")
analysis <- mutate(analysis, probability = probabilities)
analysis <- mutate(analysis, prediction = probabilities>0.5)
table(high_use = analysis$high_use, prediction = analysis$prediction)
# initialize a plot of 'high_use' versus 'probability' in 'analysis'
g <- ggplot(analysis, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
# define a loss function (mean prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = analysis$high_use, prob = analysis$probability)
# define a loss function (mean prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = analysis$high_use, prob = analysis$prediction)
# define a loss function (mean prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = analysis$high_use, prob = analysis$probability)
head(propabilities)
head(analysis$probability)
head(analysis)
table(analysis$sex, analysis$high_use)
table(analysis$sex, analysis$high_use) %>% addmargins()
