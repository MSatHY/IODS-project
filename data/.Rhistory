getwd()
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
str(lrn14)
dim(lrn14)
# 1.1 Select the columns related to deep learning and create column 'deep' by averaging
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# 1.2 select the columns related to surface learning and create column 'surf' by averaging
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# 1.3 select the columns related to strategic learning and create column 'stra' by averaging
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
library(dplyr)
# 1.1 Select the columns related to deep learning and create column 'deep' by averaging
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# 1.2 select the columns related to surface learning and create column 'surf' by averaging
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# 1.3 select the columns related to strategic learning and create column 'stra' by averaging
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# Selecting the data for further analysis:
analysis_questions <- c( "gender", "Age" , "Attitude", "deep", "stra", "surf" , "Points")
analysis <- select(lrn14, one_of(analysis_questions))
library(dplyr)
# Installing the R packages needed for the code to work:
install.packages("pacman")
library(pacman)
p_load(dplyr)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human <- read.table(url, sep = ",", header = T)
library(dplyr)
# Read the data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# meta available
# http://hdr.undp.org/en/content/human-development-index-hdi
# technical notes
# http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf
# Exloration of the data:
str(hd)
dim(hd)
summary(hd)
#'data.frame':	195 obs. of  8 variables:
#$ HDI.Rank                              : int  1 2 3 4 5 6 6 8 9 9 ...
#$ Country                               : chr  "Norway" "Australia" "Switzerland" "Denmark" ...
#$ Human.Development.Index..HDI.         : num  0.944 0.935 0.93 0.923 0.922 0.916 0.916 0.915 0.913 0.913 ...
#$ Life.Expectancy.at.Birth              : num  81.6 82.4 83 80.2 81.6 80.9 80.9 79.1 82 81.8 ...
#$ Expected.Years.of.Education           : num  17.5 20.2 15.8 18.7 17.9 16.5 18.6 16.5 15.9 19.2 ...
#$ Mean.Years.of.Education               : num  12.6 13 12.8 12.7 11.9 13.1 12.2 12.9 13 12.5 ...
#$ Gross.National.Income..GNI..per.Capita: chr  "64,992" "42,261" "56,431" "44,025" ...
#$ GNI.per.Capita.Rank.Minus.HDI.Rank    : int  5 17 6 11 9 11 16 3 11 23 ...
# Exloration of the data:
str(gii)
dim(gii)
summary(gii)
#'data.frame':	195 obs. of  10 variables:
#  $ GII.Rank                                    : int  1 2 3 4 5 6 6 8 9 9 ...
#$ Country                                     : chr  "Norway" "Australia" "Switzerland" "Denmark" ...
#$ Gender.Inequality.Index..GII.               : num  0.067 0.11 0.028 0.048 0.062 0.041 0.113 0.28 0.129 0.157 ...
#$ Maternal.Mortality.Ratio                    : int  4 6 6 5 6 7 9 28 11 8 ...
#$ Adolescent.Birth.Rate                       : num  7.8 12.1 1.9 5.1 6.2 3.8 8.2 31 14.5 25.3 ...
#$ Percent.Representation.in.Parliament        : num  39.6 30.5 28.5 38 36.9 36.9 19.9 19.4 28.2 31.4 ...
#$ Population.with.Secondary.Education..Female.: num  97.4 94.3 95 95.5 87.7 96.3 80.5 95.1 100 95 ...
#$ Population.with.Secondary.Education..Male.  : num  96.7 94.6 96.6 96.6 90.5 97 78.6 94.8 100 95.3 ...
#$ Labour.Force.Participation.Rate..Female.    : num  61.2 58.8 61.8 58.7 58.5 53.6 53.1 56.3 61.6 62 ...
#$ Labour.Force.Participation.Rate..Male.      : num  68.7 71.8 74.9 66.4 70.6 66.4 68.1 68.9 71 73.8 ...
# Renaming when necessary...
colnames(hd) # human developmental index
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "AgeEstim"
colnames(hd)[5] <- "SchEstim"
colnames(hd)[6] <- "SchData"
colnames(hd)[7] <- "gniShare"
colnames(hd)[8] <- "RankDist"
colnames(gii) # gender inequality index
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "MaterMort"
colnames(gii)[5] <- "TeenBirth"
colnames(gii)[6] <- "Parliament%"
colnames(gii)[7] <- "SecEducF%"
colnames(gii)[8] <- "SecEducM%"
colnames(gii)[9] <- "LabourF%"
colnames(gii)[10] <- "LabourM%"
# Mutate data to create ratios of 2. education % and labour (F to M).
gii <- mutate(gii, ratioSecEdu = gii$`SecEducF%`/gii$`SecEducM%`)
gii <- mutate(gii, ratioLabour = gii$`LabourF%`/gii$`LabourM%`)
# Join data by country and check result
human <- inner_join(hd, gii, by="Country")
str(human) # 195 obs and 19 variables
# Write to set working directory
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
write.table(human, file="human.txt", append = F, quote = T, sep="\t")
# 3.2 Checking readability
reading_test <- read.table("human.txt", sep="\t", header=T)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human2 <- read.table(url, sep = ",", header = T)
# Loading of the data modified in a harmonized way:
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human <- read.table(url, sep = ",", header = T)
str(human)
# 3.2 Checking readability
reading_test <- read.table("human.txt", sep="\t", header=T)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
# Continuation of the data wrangling (24.2.2017)
# The excercise for this week produced the following urls:
# original data page: http://hdr.undp.org/en/content/human-development-index-hdi
# overview on developmental indices: http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf
# See the meta file for the modified data (loaded below): https://raw.githubusercontent.com/TuomoNieminen/Helsinki-Open-Data-Science/master/datasets/human_meta.txt
# For loading of the data modified in a harmonized way, run the two commneted-out script lines below (without the #-marks):
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
# human <- read.table(url, sep = ",", header = T)
str(human)
# Markus Selin, 17.2.2017, Data wrangling excercise for Dimensionality reduction excericises (next week)
library(dplyr)
# Read the data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# meta available
# http://hdr.undp.org/en/content/human-development-index-hdi
# technical notes
# http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf
# Exloration of the data:
str(hd)
dim(hd)
summary(hd)
#'data.frame':	195 obs. of  8 variables:
#$ HDI.Rank                              : int  1 2 3 4 5 6 6 8 9 9 ...
#$ Country                               : chr  "Norway" "Australia" "Switzerland" "Denmark" ...
#$ Human.Development.Index..HDI.         : num  0.944 0.935 0.93 0.923 0.922 0.916 0.916 0.915 0.913 0.913 ...
#$ Life.Expectancy.at.Birth              : num  81.6 82.4 83 80.2 81.6 80.9 80.9 79.1 82 81.8 ...
#$ Expected.Years.of.Education           : num  17.5 20.2 15.8 18.7 17.9 16.5 18.6 16.5 15.9 19.2 ...
#$ Mean.Years.of.Education               : num  12.6 13 12.8 12.7 11.9 13.1 12.2 12.9 13 12.5 ...
#$ Gross.National.Income..GNI..per.Capita: chr  "64,992" "42,261" "56,431" "44,025" ...
#$ GNI.per.Capita.Rank.Minus.HDI.Rank    : int  5 17 6 11 9 11 16 3 11 23 ...
# Exloration of the data:
str(gii)
dim(gii)
summary(gii)
#'data.frame':	195 obs. of  10 variables:
#  $ GII.Rank                                    : int  1 2 3 4 5 6 6 8 9 9 ...
#$ Country                                     : chr  "Norway" "Australia" "Switzerland" "Denmark" ...
#$ Gender.Inequality.Index..GII.               : num  0.067 0.11 0.028 0.048 0.062 0.041 0.113 0.28 0.129 0.157 ...
#$ Maternal.Mortality.Ratio                    : int  4 6 6 5 6 7 9 28 11 8 ...
#$ Adolescent.Birth.Rate                       : num  7.8 12.1 1.9 5.1 6.2 3.8 8.2 31 14.5 25.3 ...
#$ Percent.Representation.in.Parliament        : num  39.6 30.5 28.5 38 36.9 36.9 19.9 19.4 28.2 31.4 ...
#$ Population.with.Secondary.Education..Female.: num  97.4 94.3 95 95.5 87.7 96.3 80.5 95.1 100 95 ...
#$ Population.with.Secondary.Education..Male.  : num  96.7 94.6 96.6 96.6 90.5 97 78.6 94.8 100 95.3 ...
#$ Labour.Force.Participation.Rate..Female.    : num  61.2 58.8 61.8 58.7 58.5 53.6 53.1 56.3 61.6 62 ...
#$ Labour.Force.Participation.Rate..Male.      : num  68.7 71.8 74.9 66.4 70.6 66.4 68.1 68.9 71 73.8 ...
# Renaming when necessary...
colnames(hd) # human developmental index
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "AgeEstim"
colnames(hd)[5] <- "SchEstim"
colnames(hd)[6] <- "SchData"
colnames(hd)[7] <- "gniShare"
colnames(hd)[8] <- "RankDist"
colnames(gii) # gender inequality index
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "MaterMort"
colnames(gii)[5] <- "TeenBirth"
colnames(gii)[6] <- "Parliament%"
colnames(gii)[7] <- "SecEducF%"
colnames(gii)[8] <- "SecEducM%"
colnames(gii)[9] <- "LabourF%"
colnames(gii)[10] <- "LabourM%"
# Mutate data to create ratios of 2. education % and labour (F to M).
gii <- mutate(gii, ratioSecEdu = gii$`SecEducF%`/gii$`SecEducM%`)
gii <- mutate(gii, ratioLabour = gii$`LabourF%`/gii$`LabourM%`)
# Join data by country and check result
human <- inner_join(hd, gii, by="Country")
str(human) # 195 obs and 19 variables
# Write to set working directory
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
write.table(human, file="human.txt", append = F, quote = T, sep="\t")
# 3.2 Checking readability
reading_test <- read.table("human.txt", sep="\t", header=T)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
# Continuation of the data wrangling (24.2.2017)
# The excercise for this week produced the following urls:
# original data page: http://hdr.undp.org/en/content/human-development-index-hdi
# overview on developmental indices: http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf
# See the meta file for the modified data (loaded below): https://raw.githubusercontent.com/TuomoNieminen/Helsinki-Open-Data-Science/master/datasets/human_meta.txt
# For loading of the data modified in a harmonized way, run the two commneted-out script lines below (without the #-marks):
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
# human <- read.table(url, sep = ",", header = T)
str(human)
str(hd)
str(gii)
str(human)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human <- read.table(url, sep = ",", header = T)
str(human)
?replace
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
library(stringr)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
str(human)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human <- read.table(url, sep = ",", header = T)
str(human$GNI)
human$GNI
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
human$GNI
str(human)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human <- read.table(url, sep = ",", header = T)
# check structure
str(human)
# Remove the thousand separator (",") in the strings and store the result as numeric variable:
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
# check structure
str(human)
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep_columns))
human <- filter(human, complete.cases(human)==TRUE)
tail(human, n=10)
human <- human[1:last, ] # keep mentioned rows and all colummns
tail(human, n=10) # The 7 last observations are summary data from large geographical areas
last <- nrow(human) - 7 # last row to keep
human <- human[1:last, ] # keep mentioned rows and all colummns
tail(human, n=10) # The 7 last observations are summary data from large geographical areas
str(human)
rownames(human) <- human@Country
rownames(human)
human@Country
str(human)
human$Country
rownames(human) <- human$Country
str(human)
human
human <- human[-Country]
human <- human[,2:ncol(human)]
str(human)
human
?write.table
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
write.table(human, file="human.txt", append = F, quote = T, sep="\t", rownames = T)
write.table(human, file="human.txt", append = F, quote = T, sep="\t", row.names = T)
read.table
?read.table
?write.table
reading_test <- read.table("human.txt", sep="\t", header=T)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
# Markus Selin, 17.2.2017, Data wrangling excercise for Dimensionality reduction excericises (next week)
library(dplyr)
# Read the data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# meta available
# http://hdr.undp.org/en/content/human-development-index-hdi
# technical notes
# http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf
# Exloration of the data:
str(hd)
dim(hd)
summary(hd)
#'data.frame':	195 obs. of  8 variables:
#$ HDI.Rank                              : int  1 2 3 4 5 6 6 8 9 9 ...
#$ Country                               : chr  "Norway" "Australia" "Switzerland" "Denmark" ...
#$ Human.Development.Index..HDI.         : num  0.944 0.935 0.93 0.923 0.922 0.916 0.916 0.915 0.913 0.913 ...
#$ Life.Expectancy.at.Birth              : num  81.6 82.4 83 80.2 81.6 80.9 80.9 79.1 82 81.8 ...
#$ Expected.Years.of.Education           : num  17.5 20.2 15.8 18.7 17.9 16.5 18.6 16.5 15.9 19.2 ...
#$ Mean.Years.of.Education               : num  12.6 13 12.8 12.7 11.9 13.1 12.2 12.9 13 12.5 ...
#$ Gross.National.Income..GNI..per.Capita: chr  "64,992" "42,261" "56,431" "44,025" ...
#$ GNI.per.Capita.Rank.Minus.HDI.Rank    : int  5 17 6 11 9 11 16 3 11 23 ...
# Exloration of the data:
str(gii)
dim(gii)
summary(gii)
#'data.frame':	195 obs. of  10 variables:
#  $ GII.Rank                                    : int  1 2 3 4 5 6 6 8 9 9 ...
#$ Country                                     : chr  "Norway" "Australia" "Switzerland" "Denmark" ...
#$ Gender.Inequality.Index..GII.               : num  0.067 0.11 0.028 0.048 0.062 0.041 0.113 0.28 0.129 0.157 ...
#$ Maternal.Mortality.Ratio                    : int  4 6 6 5 6 7 9 28 11 8 ...
#$ Adolescent.Birth.Rate                       : num  7.8 12.1 1.9 5.1 6.2 3.8 8.2 31 14.5 25.3 ...
#$ Percent.Representation.in.Parliament        : num  39.6 30.5 28.5 38 36.9 36.9 19.9 19.4 28.2 31.4 ...
#$ Population.with.Secondary.Education..Female.: num  97.4 94.3 95 95.5 87.7 96.3 80.5 95.1 100 95 ...
#$ Population.with.Secondary.Education..Male.  : num  96.7 94.6 96.6 96.6 90.5 97 78.6 94.8 100 95.3 ...
#$ Labour.Force.Participation.Rate..Female.    : num  61.2 58.8 61.8 58.7 58.5 53.6 53.1 56.3 61.6 62 ...
#$ Labour.Force.Participation.Rate..Male.      : num  68.7 71.8 74.9 66.4 70.6 66.4 68.1 68.9 71 73.8 ...
# Renaming when necessary...
colnames(hd) # human developmental index
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "AgeEstim"
colnames(hd)[5] <- "SchEstim"
colnames(hd)[6] <- "SchData"
colnames(hd)[7] <- "gniShare"
colnames(hd)[8] <- "RankDist"
colnames(gii) # gender inequality index
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "MaterMort"
colnames(gii)[5] <- "TeenBirth"
colnames(gii)[6] <- "Parliament%"
colnames(gii)[7] <- "SecEducF%"
colnames(gii)[8] <- "SecEducM%"
colnames(gii)[9] <- "LabourF%"
colnames(gii)[10] <- "LabourM%"
# Mutate data to create ratios of 2. education % and labour (F to M).
gii <- mutate(gii, ratioSecEdu = gii$`SecEducF%`/gii$`SecEducM%`)
gii <- mutate(gii, ratioLabour = gii$`LabourF%`/gii$`LabourM%`)
# Join data by country and check result
human <- inner_join(hd, gii, by="Country")
str(human) # 195 obs and 19 variables
# Write to set working directory
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
write.table(human, file="human.txt", append = F, quote = T, sep="\t")
# 3.2 Checking readability
reading_test <- read.table("human.txt", sep="\t", header=T)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
# Continuation of the data wrangling (24.2.2017)
library(stringr)
# The excercise for this week produced the following urls:
# original data page: http://hdr.undp.org/en/content/human-development-index-hdi
# overview on developmental indices: http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf
# See the meta file for the modified data (loaded below): https://raw.githubusercontent.com/TuomoNieminen/Helsinki-Open-Data-Science/master/datasets/human_meta.txt
# Loading of the data modified in a harmonized way:
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt"
human <- read.table(url, sep = ",", header = T)
# check structure
str(human)
# Remove the thousand separator (",") in the strings and store the result as numeric variable:
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
# check structure
str(human)
# Keep only relevant variables
keep_columns <- c("Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep_columns))
# Keep only "complete cases" i.e. rows (observations) without missing values:
human <- filter(human, complete.cases(human)==TRUE)
# Remove large geographical areas from the data
tail(human, n=10)         # The 7 last observations are summary data from large geographical areas
last <- nrow(human) - 7   # Last row to keep
human <- human[1:last, ]  # Keep mentioned rows and all colummns
tail(human, n=10)         # It went OK, since Niger was the last country and is now the last observation
# Name the rows with countries and remove variable "Country"
rownames(human) <- human$Country # Copy country names as row names
human <- human[,2:ncol(human)]   # Remove country names column (the 1st column) from the data
# Save the data:
setwd("C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data")
write.table(human, file="human.txt", append = F, quote = T, sep="\t", row.names = T)
# Checking readability
reading_test <- read.table("human.txt", sep="\t", header=T)
str(reading_test)
head(reading_test)
glimpse(reading_test)
dim(reading_test)
folder <- "C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data\\"
file <- "human.txt"
loadfile <- paste (folder, file, sep = "", collapse = NULL)
loadfile
load.table(loadfile, sep="\t", header=T)
read.table(loadfile, sep="\t", header=T)
```{r, include=F, echo=F}
```{r, include=F, echo=F}
folder <- "C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data\\"
file <- "human.txt"
loadfile <- paste (folder, file, sep = "", collapse = NULL)
read.table(loadfile, sep="\t", header=T)
str(human)
folder <- "C:\\Users\\Markus\\Documents\\OpenDataScience\\IODS-project\\data\\"
file <- "human.txt"
loadfile <- paste (folder, file, sep = "", collapse = NULL)
human <- read.table(loadfile, sep="\t", header=T)
str(human)
dim(human)
library(GGally)
# calculate the correlation matrix and round it
cor_matrix <- cor(human)
# print the correlation matrix
cor_matrix <- cor_matrix %>% round(digits=2)
cor_matrix
# calculate the correlation matrix and round it
cor_matrix <- cor_matrix %>% round(digits=2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type ="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
library(corrplot)
# calculate the correlation matrix and round it
cor_matrix <- cor_matrix %>% round(digits=2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type ="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
p <- ggpairs(human, upper=NULL, lower = list(combo = wrap("facethist", bins = 20)))
p
# calculate the correlation matrix and round it
cor_matrix <- cor_matrix %>% round(digits=2)
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type ="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
# print the correlation matrix
cor_matrix
summary (human)
summary (human)
p <- ggpairs(human, upper=NULL, lower = list(combo = wrap("facethist", bins = 20)))
p
